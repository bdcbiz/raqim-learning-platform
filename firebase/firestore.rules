rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // Helper function to check if user is moderator
    function isModerator() {
      return isAuthenticated() && request.auth.token.moderator == true;
    }

    // Helper function to check if user is instructor
    function isInstructor() {
      return isAuthenticated() && request.auth.token.instructor == true;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is enrolled in a course
    function isEnrolled(courseId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + courseId));
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId) || isAdmin();

      // Users can update their own profile (except role field)
      allow update: if isOwner(userId) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'isActive']));

      // Only admins can create or delete users
      allow create: if isAdmin();
      allow delete: if isAdmin();

      // Admins can update any field including role
      allow update: if isAdmin();
    }

    // Courses collection
    match /courses/{courseId} {
      // Anyone can read published courses
      allow read: if resource.data.isPublished == true || isAdmin() || isInstructor();

      // Only instructors and admins can create courses
      allow create: if isAdmin() || isInstructor();

      // Only course owner (instructor) or admin can update
      allow update: if isAdmin() ||
        (isInstructor() && resource.data.instructorId == request.auth.uid);

      // Only admins can delete courses
      allow delete: if isAdmin();

      // Course lessons
      match /lessons/{lessonId} {
        // Read lessons only if enrolled in course or admin/instructor
        allow read: if isEnrolled(courseId) || isAdmin() ||
          (isInstructor() && get(/databases/$(database)/documents/courses/$(courseId)).data.instructorId == request.auth.uid);

        // Only course instructor or admin can write lessons
        allow write: if isAdmin() ||
          (isInstructor() && get(/databases/$(database)/documents/courses/$(courseId)).data.instructorId == request.auth.uid);
      }
    }

    // Enrollments collection
    match /enrollments/{enrollmentId} {
      // Users can read their own enrollments
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());

      // Only admins can create enrollments (after payment verification)
      allow create: if isAdmin();

      // Users can update their own progress
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['progress', 'lastAccessedAt', 'completedLessons']);

      // Only admins can delete enrollments
      allow delete: if isAdmin();
    }

    // Payments collection
    match /payments/{paymentId} {
      // Users can read their own payments
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());

      // Only system (via Cloud Functions) can create payments
      allow create: if false;

      // Only admins can update payments (for verification)
      allow update: if isAdmin();

      // No one can delete payments
      allow delete: if false;
    }

    // News collection
    match /news/{newsId} {
      // Anyone can read published news
      allow read: if resource.data.isPublished == true || isAdmin() || isModerator();

      // Only admins and moderators can write news
      allow write: if isAdmin() || isModerator();
    }

    // Categories collection
    match /categories/{categoryId} {
      // Anyone can read categories
      allow read: if true;

      // Only admins can write categories
      allow write: if isAdmin();
    }

    // Community posts collection
    match /posts/{postId} {
      // Anyone can read approved posts
      allow read: if resource.data.status == 'approved' ||
        isOwner(resource.data.userId) || isAdmin() || isModerator();

      // Authenticated users can create posts
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending';

      // Users can update their own posts
      allow update: if isOwner(resource.data.userId) &&
        request.resource.data.status == resource.data.status;

      // Moderators and admins can update any post (for approval)
      allow update: if isAdmin() || isModerator();

      // Users can delete their own posts, admins/moderators can delete any
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isModerator();

      // Post comments
      match /comments/{commentId} {
        // Anyone can read comments on approved posts
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.status == 'approved';

        // Authenticated users can create comments
        allow create: if isAuthenticated() &&
          request.resource.data.userId == request.auth.uid;

        // Users can update their own comments
        allow update: if isOwner(resource.data.userId);

        // Users can delete their own comments, admins/moderators can delete any
        allow delete: if isOwner(resource.data.userId) || isAdmin() || isModerator();
      }
    }

    // Certificates collection
    match /certificates/{certificateId} {
      // Users can read their own certificates
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());

      // Only system can create certificates (after course completion)
      allow create: if false;

      // No one can update or delete certificates
      allow update: if false;
      allow delete: if false;
    }

    // Advertisements collection
    match /advertisements/{adId} {
      // Anyone can read active ads
      allow read: if resource.data.isActive == true || isAdmin();

      // Only admins can write ads
      allow write: if isAdmin();
    }

    // Analytics collection (write-only for users, read for admins)
    match /analytics/{docId} {
      // Only admins can read analytics
      allow read: if isAdmin();

      // Authenticated users can write analytics events
      allow create: if isAuthenticated();

      // No updates or deletes
      allow update: if false;
      allow delete: if false;
    }

    // System settings collection
    match /settings/{settingId} {
      // Anyone can read public settings
      allow read: if resource.data.isPublic == true || isAdmin();

      // Only admins can write settings
      allow write: if isAdmin();
    }

    // Audit logs collection
    match /auditLogs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();

      // No one can write directly (only via Cloud Functions)
      allow write: if false;
    }
  }
}